diff --git a/fs/isofs/Kconfig b/fs/isofs/Kconfig
index 08ffd37b9bb8..424fbc15ecea 100644
--- a/fs/isofs/Kconfig
+++ b/fs/isofs/Kconfig
@@ -38,3 +38,41 @@ config ZISOFS
 	  <http://www.kernel.org/pub/linux/utils/fs/zisofs/> for the tools
 	  necessary to create such a filesystem.  Say Y here if you want to be
 	  able to read such compressed CD-ROMs.
+
+config ZISOFS2
+	bool "Extended support"
+	depends on ZISOFS
+	help
+	  The zisofs2 extension made possible to handle files bigger than
+	  4 GiB and more compressors. See
+	  <https://github.com/vk496/zisofs2-tools/> for the tools
+	  necessary to create such a filesystem.  Say Y here if you want to be
+	  able to read such compressed CD-ROMs.
+
+config ZISOFS2_XZ
+	bool "XZ support"
+	depends on ZISOFS2
+	select DECOMPRESS_XZ
+	help
+	  Support compressed CD-ROM with XZ
+
+config ZISOFS2_LZ4
+	bool "LZ4 support"
+	depends on ZISOFS2
+	select DECOMPRESS_LZ4
+	help
+	  Support compressed CD-ROM with LZ4
+
+config ZISOFS2_ZSTD
+	bool "ZSTD support"
+	depends on ZISOFS2
+	select DECOMPRESS_ZSTD
+	help
+	  Support compressed CD-ROM with ZSTD
+
+config ZISOFS2_BZIP2
+	bool "BZIP2 support"
+	depends on ZISOFS2
+	select DECOMPRESS_BZIP2
+	help
+	  Support compressed CD-ROM with BZIP2
\ No newline at end of file
diff --git a/fs/isofs/inode.c b/fs/isofs/inode.c
index 78f5c96c76f3..3b8ecca62906 100644
--- a/fs/isofs/inode.c
+++ b/fs/isofs/inode.c
@@ -1464,6 +1464,7 @@ static int isofs_read_inode(struct inode *inode, int relocated)
 		switch (ei->i_file_format) {
 #ifdef CONFIG_ZISOFS
 		case isofs_file_compressed:
+		case isofs_file_zisofs2:
 			inode->i_data.a_ops = &zisofs_aops;
 			break;
 #endif
diff --git a/fs/isofs/isofs.h b/fs/isofs/isofs.h
index 055ec6c586f7..4078cefcfe20 100644
--- a/fs/isofs/isofs.h
+++ b/fs/isofs/isofs.h
@@ -9,6 +9,7 @@ enum isofs_file_format {
 	isofs_file_normal = 0,
 	isofs_file_sparse = 1,
 	isofs_file_compressed = 2,
+	isofs_file_zisofs2 = 3,
 };
 	
 /*
@@ -107,6 +108,10 @@ static inline unsigned int isonum_733(u8 *p)
 	/* Ignore bigendian datum due to broken mastering programs */
 	return get_unaligned_le32(p);
 }
+static inline unsigned int isonum_uint64(u8 *p)
+{
+	return get_unaligned_le64(p);
+}
 extern int iso_date(u8 *, int);
 
 struct inode;		/* To make gcc happy */
diff --git a/fs/isofs/rock.c b/fs/isofs/rock.c
index 94ef92fe806c..7230ca5b7acd 100644
--- a/fs/isofs/rock.c
+++ b/fs/isofs/rock.c
@@ -540,14 +540,24 @@ parse_rock_ridge_inode_internal(struct iso_directory_record *de,
 			break;
 #ifdef CONFIG_ZISOFS
 		case SIG('Z', 'F'): {
-			int algo;
+			int algo, block_shift;
 
 			if (ISOFS_SB(inode->i_sb)->s_nocompress)
 				break;
+
 			algo = isonum_721(rr->u.ZF.algorithm);
+			block_shift = isonum_711(&rr->u.ZF.parms[1]);
+
+			if (block_shift > 20 || block_shift < 15) {
+				printk(KERN_WARNING "isofs: "
+					"Can't handle ZF block "
+					"size of 2^%d\n",
+					block_shift);
+				goto eio;
+			}
+
 			if (algo == SIG('p', 'z')) {
-				int block_shift =
-					isonum_711(&rr->u.ZF.parms[1]);
+				/* pz is reserved for zisofs only */
 				if (block_shift > 17) {
 					printk(KERN_WARNING "isofs: "
 						"Can't handle ZF block "
@@ -568,17 +578,60 @@ parse_rock_ridge_inode_internal(struct iso_directory_record *de,
 					ISOFS_I(inode)->i_format_parm[0] =
 						isonum_711(&rr->u.ZF.parms[0]);
 					ISOFS_I(inode)->i_format_parm[1] =
-						isonum_711(&rr->u.ZF.parms[1]);
+						block_shift;
 					inode->i_size =
 					    isonum_733(rr->u.ZF.
 						       real_size);
 				}
 			} else {
-				printk(KERN_WARNING
-				       "isofs: Unknown ZF compression "
-						"algorithm: %c%c\n",
-				       rr->u.ZF.algorithm[0],
-				       rr->u.ZF.algorithm[1]);
+#ifdef CONFIG_ZISOFS2
+				/* zisofs2 */
+				int old_size;
+
+				//TODO: Should this definitions be outside?
+				ISOFS_I(inode)->i_file_format = isofs_file_zisofs2;
+				/* Header size*/
+				ISOFS_I(inode)->i_format_parm[0] =
+						isonum_711(&rr->u.ZF.parms[0]);
+				/* Block size*/
+				ISOFS_I(inode)->i_format_parm[1] =
+						block_shift;
+
+
+				old_size = inode->i_size;
+				inode->i_size = isonum_uint64(rr->u.ZF.real_size);
+				
+				if (algo == SIG('P', 'Z')) {
+				} 
+	#ifdef CONFIG_ZISOFS2_XZ
+				else if (algo == SIG('X', 'Z')) {
+				} 
+	#endif
+	#ifdef CONFIG_ZISOFS2_LZ4
+				else if (algo == SIG('L', '4')) {
+				} 
+	#endif
+	#ifdef CONFIG_ZISOFS2_XZ
+				else if (algo == SIG('Z', 'D')) {
+				} 
+	#endif
+	#ifdef CONFIG_ZISOFS2_XZ
+				else if (algo == SIG('B', '2')) {
+				} 
+	#endif
+				else {
+					/* Not recognized algorithm. Resetting... */
+					ISOFS_I(inode)->i_file_format = isofs_file_normal;
+					inode->i_size = old_size;
+#endif
+					printk(KERN_WARNING
+						"isofs: Unknown ZF compression "
+							"algorithm: %c%c\n",
+						rr->u.ZF.algorithm[0],
+						rr->u.ZF.algorithm[1]);
+#ifdef CONFIG_ZISOFS2
+				}
+#endif
 			}
 			break;
 		}
diff --git a/fs/isofs/rock.h b/fs/isofs/rock.h
index 1558cf22ef8a..9d411d472704 100644
--- a/fs/isofs/rock.h
+++ b/fs/isofs/rock.h
@@ -76,9 +76,9 @@ struct RR_TF_s {
 
 /* Linux-specific extension for transparent decompression */
 struct RR_ZF_s {
-	__u8 algorithm[2];
-	__u8 parms[2];
-	__u8 real_size[8];
+	__u8 algorithm[2]; /* BP 5 - BP 6 */
+	__u8 parms[2]; /* BP 7, BP 8 */
+	__u8 real_size[8]; /* BP 9 - BP 16 */
 };
 
 /*
